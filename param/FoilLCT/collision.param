/* Copyright 2019-2023 Rene Widera, Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/collision/collision.def"

#ifndef PARAM_COLLISION_PRECISION
#define PARAM_COLLISION_PRECISION float_32
#endif

#ifndef PARAM_DYNAMIC_LOG_INTER
#define PARAM_DYNAMIC_LOG_INTER 0
#endif
#ifndef PARAM_DYNAMIC_LOG_INTRA
#define PARAM_DYNAMIC_LOG_INTRA 0
#endif
namespace picongpu {
namespace particles {
namespace collision {
namespace precision {
using float_COLL = PARAM_COLLISION_PRECISION;
} // namespace precision

using CollisionScreeningSpecies =
    MakeSeq_t<Electrons, Hydrogen, Carbon, Nitrogen>;

constexpr bool debugScreeningLength = false;

/** CollisionPipeline defines in which order species interact with each other
 *
 * the functors are called in order (from first to last functor)
 */

using Pairs = MakeSeq_t<Pair<Electrons, Hydrogen>, Pair<Electrons, Carbon>,
                        Pair<Electrons, Nitrogen>, Pair<Electrons, Electrons>,
                        Pair<Hydrogen, Hydrogen>, Pair<Carbon, Carbon>,
                        Pair<Nitrogen, Nitrogen>>;

using ColliderPairs =
    Collider<relativistic::RelativisticCollisionDynamicLog<false>, Pairs>;

using CollisionPipeline = pmacc::mp_list<ColliderPairs>;

/** Chunk size used for cell list allocations.
 *
 * To reduce the fragmentation of the heap memory on accelerators the collision
 * algorithm is allocating a multiple of this value to store a cell list of
 * particle IDs. The value must be non zero.
 */
constexpr uint32_t cellListChunkSize = TYPICAL_PARTICLES_PER_CELL;

} // namespace collision
} // namespace particles
} // namespace picongpu
